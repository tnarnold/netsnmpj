/*

	       Copyright(c) 2003 by Andrew E. Page

		      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appears in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name Andrew E. Page not be used
in advertising or publicity pertaining to distribution of the software
without specific, written prior permission.

ANDREW E. PAGE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL ANDREW E. PAGE BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.

*/

package org.netsnmp.swingui;
import org.netsnmp.*;

import javax.swing.*;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.text.*;

/**
 * swing panel that will perform snmpget operations
 * @author Andrew E. Page<aepage@users.sourceforge.net>
 */
public class snmpgetJPanel extends javax.swing.JPanel {

	private MIBDialog mibDlg;
	private SessionPanel sessionPanel = new SessionPanel(null, NetSNMP.SNMPv3) ;
	/** Creates new form snmpgetJPanel */
	public snmpgetJPanel() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() { //GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gbc = new GridBagConstraints();

		//JPanel hostRow = new JPanel();

		oidField = new javax.swing.JTextField();
		getBtn = new javax.swing.JButton();
		walkBtn = new javax.swing.JButton();
		mibBrowserBtn = new javax.swing.JButton();
		hostLabel = new javax.swing.JLabel("Host:");
		hostField = new javax.swing.JTextField();
		communityLabel = new javax.swing.JLabel("Community:");
		communityField = new javax.swing.JPasswordField();
		scrollPane = new javax.swing.JScrollPane();
		logText = new javax.swing.JTextArea();

		setLayout(new java.awt.GridBagLayout());
		
		gbc.fill = GridBagConstraints.HORIZONTAL ;
		gbc.weightx = 1.0 ;
		gbc.gridwidth = 4 ;
		add(sessionPanel, gbc) ;

		oidField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		oidField.setText("SNMPv2-MIB::sysDescr.0");
		oidField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				oidFieldActionPerformed(evt);
			}
		});

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 1;
		gbc.gridwidth = 1;
		gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1.0;
		add(oidField, gbc);

		getBtn.setText("Get");
		getBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				getBtnActionPerformed(evt);
			}
		});

		walkBtn.setText("Walk");
		walkBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				walkBtnActionPerformed(evt);
			}
		});

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		add(getBtn, gbc);

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		add(walkBtn, gbc);

		mibBrowserBtn.setText("MIB...");
		mibBrowserBtn.setToolTipText("Browse MIB");
		mibBrowserBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mibBrowserBtnActionPerformed(evt);
			}
		});

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 1;
		add(mibBrowserBtn, gbc);

		javax.swing.JPanel auxControlsRow = new javax.swing.JPanel() ;
		
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = 4;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		
		add(auxControlsRow, gbc) ;
		setAuxControls(auxControlsRow) ;

		scrollPane.setViewportView(logText);

		gbc = new java.awt.GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.gridwidth = 4;
		gbc.fill = java.awt.GridBagConstraints.BOTH;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		add(scrollPane, gbc);
	} //GEN-END:initComponents

	private void setAuxControls(Container panel) {
		GridBagConstraints gbc = new GridBagConstraints() ;
		JButton clearBtn ;
		ActionListener l ;
		panel.setLayout(new GridBagLayout()) ;
	
		gbc.fill = GridBagConstraints.HORIZONTAL ;
		gbc.gridx = 0 ;
		gbc.gridy = 0 ;
		gbc.weightx = 1.0 ;
		gbc.gridwidth = 1 ;
		
		clearBtn = new JButton("Clear") ;
		panel.add(clearBtn, gbc) ;
		
		l = new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				logText.setText("") ; // clear
				
			}
			
		} ;
		
		clearBtn.addActionListener(l) ;
		
	}

	/**
	 * Method walkBtnActionPerformed.
	 * @param evt
	 */
	private void walkBtnActionPerformed(ActionEvent evt) {
		// Add your handling code here:

		OID oid;
		String oidText = oidField.getText();
		try {
			oid = MIB.readObjID(oidText);
		} catch (MIBItemNotFound e) {
			tsLogMsg("Could not find OID for \"" + oidText + "\"\n");
			return;
		}

		new Thread(new snmpwalkRequest(sessionPanel, oid)).start() ;
	}

	private void getBtnActionPerformed(
		java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_getBtnActionPerformed
		// Add your handling code here:
		snmpgetRequest req ;
		OID oid;
		String oidText = oidField.getText();
		try {
			oid = MIB.readObjID(oidText);
		} catch (MIBItemNotFound e) {
			tsLogMsg("Could not find OID for \"" + oidText + "\"\n");
			return;
		}

		try {
			req =  new snmpgetRequest(
			sessionPanel.createSession(true),
			oid);
			}
		catch( Exception e ) {
			JOptionPane.showMessageDialog(this, "Error " + e, "Request Error", JOptionPane.WARNING_MESSAGE) ;
			return ;
		}
		

		new Thread(req).start();

	} //GEN-LAST:event_getBtnActionPerformed

	private String oldOIDString;

	private void mibBrowserBtnActionPerformed(
		java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_mibBrowserBtnActionPerformed
		// Add your handling code here:
		oldOIDString = oidField.getText();

		if (mibDlg == null) {
			mibDlg = new MIBDialog(null, true);
			mibDlg.addDefaultMIBs();
		}

		mibDlg.show();

		if (!mibDlg.good)
			return;

		oidField.setText(mibDlg.getOID().toText());
		return;
	} //GEN-LAST:event_mibBrowserBtnActionPerformed

	private void oidFieldActionPerformed(
		java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_oidFieldActionPerformed
		// Add your handling code here:
	} //GEN-LAST:event_oidFieldActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPasswordField communityField;
	private javax.swing.JLabel hostLabel;
	private javax.swing.JScrollPane scrollPane;
	private javax.swing.JLabel communityLabel;
	private javax.swing.JTextArea logText;
	private javax.swing.JButton mibBrowserBtn;
	private javax.swing.JButton getBtn, walkBtn;
	private javax.swing.JTextField hostField;
	private javax.swing.JTextField oidField;
	// End of variables declaration//GEN-END:variables

	private DateFormat dateFormat =
		new SimpleDateFormat("HH:mm:ss.SSS yy/MM/dd ");

	public void setHost(String host) {
		hostField.setText(host);
	}

	public void setCommunity(String community) {
		communityField.setText(community);
	}

	public void logMsg(final String s) {
		Runnable r;

		r = new Runnable() {
			public void run() {
				logText.append(s);
			}
		};
		SwingUtilities.invokeLater(r);
	}

	public void tsLogMsg(String s) {
		StringBuffer msg = new StringBuffer();

		String ts = dateFormat.format(new Date());
		msg.append(ts);
		msg.append(s);

		logMsg(msg.toString());
	}

	private class snmpwalkRequest implements Runnable, NetSNMPAction {
		OID startOID;
		NetSNMPSession s;
		snmpwalkRequest(SessionProvider prv, OID oid) {
			
			s = prv.createSession() ;
			
			this.startOID = oid;	
			s.open() ;
		}

		public boolean actionPerformed(
			int result,
			NetSNMPSession session,
			PDU pdu,
			Object lock)
			throws Throwable {

			if (result == NetSNMP.STAT_TIMEOUT) {
				tsLogMsg("operation timed out\n");
				synchronized (lock) {
					notify();
				}

				return false;
			}

			if (pdu.entries[0].oid.compareTo(startOID, startOID.length())
				!= 0) {
				// done 
				synchronized (lock) {
					lock.notify();
				}
				tsLogMsg("operation complete\n");
				return false;
			}

			tsLogMsg(pdu.toString() + "\n");

			PDU nextPdu = new PDU(NetSNMP.MSG_GETNEXT);

			nextPdu.addNullEntry(pdu.entries[0].oid);
			session.send(nextPdu, lock);
			return true;
		}

		public void run() {
			
			PDU pdu = new PDU(NetSNMP.MSG_GETNEXT);
			Object lock = new Object();
			s.addListener(this);

			pdu.addNullEntry(startOID);

			try {
				synchronized (lock) {
					s.send(pdu, lock);
					lock.wait();
				} // synchronized
			} catch (Exception e) {
				tsLogMsg("walk request failed " + e.getMessage());
			}

			/*Iterator it = responses.iterator() ;
			while( it.hasNext() )
				tsLogMsg("" + it.next()) ;
			*/
		}

	}

	private class snmpgetRequest implements Runnable, NetSNMPAction {
		public synchronized boolean actionPerformed(
			int result,
			NetSNMPSession session,
			PDU pdu,
			Object o)
			throws Throwable {
			notify();
			if (result == NetSNMP.STAT_TIMEOUT) {
				tsLogMsg("request to " + sess + " timed out\n");
				return false;
			}

			if (result != 1)
				tsLogMsg("bad result = " + result + "/" + pdu.errStatus);
			else
				tsLogMsg(pdu.toString() + "\n");

			return false;
		}

		public void run() {
			
			PDU pdu = new PDU(NetSNMP.MSG_GET);

			pdu.addNullEntry(oid);

			sess.addListener(this);

			tsLogMsg("submitting request\n");

			synchronized (this) {
				try {
					sess.send(pdu, null);
					wait();
				} catch (Exception e) {
					tsLogMsg("get request failed " + e.getMessage());
					return;
				}

			} // synchronized

		}

		OID oid;
		NetSNMPSession sess ;
		snmpgetRequest(NetSNMPSession sess, OID oid) {
			this.oid = oid;
			this.sess = sess ;

		}

	}

}

/*
 * $Log: snmpgetJPanel.java,v $
 * Revision 1.9  2003/04/30 00:50:25  aepage
 * improvement in error message
 *
 * Revision 1.8  2003/04/29 21:44:06  aepage
 * correction of session used for walk operation
 *
 * Revision 1.7  2003/04/29 12:22:58  aepage
 * correction of output statement
 *
 * Revision 1.6  2003/04/27 16:30:58  aepage
 * V3 updates
 *
 * Revision 1.5  2003/04/19 01:45:39  aepage
 * now uses the SessionPanel class to configure a Session
 *
 * Revision 1.4  2003/03/31 00:43:08  aepage
 * removal of unuzed variables.
 *
 * Revision 1.3  2003/03/30 23:06:01  aepage
 * removal of unncessary imports
 *
 * Revision 1.2  2003/03/29 00:07:43  aepage
 * new thread architecture, and expanded mib browser features.
 *
 * Revision 1.1  2003/02/09 23:38:01  aepage
 * initial checkin
 *
 */
